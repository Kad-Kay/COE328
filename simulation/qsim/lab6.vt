// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2016 12:03:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    intelcoreiBOSS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module intelcoreiBOSS_vlg_sample_tst(
	A,
	B,
	clock,
	reset,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  clock;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clock or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module intelcoreiBOSS_vlg_check_tst (
	led2,
	leds,
	NEGATORY,
	RTest,
	Stest,
	sampler_rx
);
input [6:0] led2;
input [6:0] leds;
input [6:0] NEGATORY;
input [8:0] RTest;
input [0:7] Stest;
input sampler_rx;

reg [6:0] led2_expected;
reg [6:0] leds_expected;
reg [6:0] NEGATORY_expected;
reg [8:0] RTest_expected;
reg [0:7] Stest_expected;

reg [6:0] led2_prev;
reg [6:0] leds_prev;
reg [6:0] NEGATORY_prev;
reg [8:0] RTest_prev;
reg [0:7] Stest_prev;

reg [6:0] led2_expected_prev;
reg [6:0] leds_expected_prev;
reg [6:0] NEGATORY_expected_prev;
reg [8:0] RTest_expected_prev;
reg [0:7] Stest_expected_prev;

reg [6:0] last_led2_exp;
reg [6:0] last_leds_exp;
reg [6:0] last_NEGATORY_exp;
reg [8:0] last_RTest_exp;
reg [0:7] last_Stest_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	led2_prev = led2;
	leds_prev = leds;
	NEGATORY_prev = NEGATORY;
	RTest_prev = RTest;
	Stest_prev = Stest;
end

// update expected /o prevs

always @(trigger)
begin
	led2_expected_prev = led2_expected;
	leds_expected_prev = leds_expected;
	NEGATORY_expected_prev = NEGATORY_expected;
	RTest_expected_prev = RTest_expected;
	Stest_expected_prev = Stest_expected;
end


// expected led2[ 6 ]
initial
begin
	led2_expected[6] = 1'bX;
end 
// expected led2[ 5 ]
initial
begin
	led2_expected[5] = 1'bX;
end 
// expected led2[ 4 ]
initial
begin
	led2_expected[4] = 1'bX;
end 
// expected led2[ 3 ]
initial
begin
	led2_expected[3] = 1'bX;
end 
// expected led2[ 2 ]
initial
begin
	led2_expected[2] = 1'bX;
end 
// expected led2[ 1 ]
initial
begin
	led2_expected[1] = 1'bX;
end 
// expected led2[ 0 ]
initial
begin
	led2_expected[0] = 1'bX;
end 
// expected leds[ 6 ]
initial
begin
	leds_expected[6] = 1'bX;
end 
// expected leds[ 5 ]
initial
begin
	leds_expected[5] = 1'bX;
end 
// expected leds[ 4 ]
initial
begin
	leds_expected[4] = 1'bX;
end 
// expected leds[ 3 ]
initial
begin
	leds_expected[3] = 1'bX;
end 
// expected leds[ 2 ]
initial
begin
	leds_expected[2] = 1'bX;
end 
// expected leds[ 1 ]
initial
begin
	leds_expected[1] = 1'bX;
end 
// expected leds[ 0 ]
initial
begin
	leds_expected[0] = 1'bX;
end 
// expected NEGATORY[ 6 ]
initial
begin
	NEGATORY_expected[6] = 1'bX;
end 
// expected NEGATORY[ 5 ]
initial
begin
	NEGATORY_expected[5] = 1'bX;
end 
// expected NEGATORY[ 4 ]
initial
begin
	NEGATORY_expected[4] = 1'bX;
end 
// expected NEGATORY[ 3 ]
initial
begin
	NEGATORY_expected[3] = 1'bX;
end 
// expected NEGATORY[ 2 ]
initial
begin
	NEGATORY_expected[2] = 1'bX;
end 
// expected NEGATORY[ 1 ]
initial
begin
	NEGATORY_expected[1] = 1'bX;
end 
// expected NEGATORY[ 0 ]
initial
begin
	NEGATORY_expected[0] = 1'bX;
end 
// expected RTest[ 8 ]
initial
begin
	RTest_expected[8] = 1'bX;
end 
// expected RTest[ 7 ]
initial
begin
	RTest_expected[7] = 1'bX;
end 
// expected RTest[ 6 ]
initial
begin
	RTest_expected[6] = 1'bX;
end 
// expected RTest[ 5 ]
initial
begin
	RTest_expected[5] = 1'bX;
end 
// expected RTest[ 4 ]
initial
begin
	RTest_expected[4] = 1'bX;
end 
// expected RTest[ 3 ]
initial
begin
	RTest_expected[3] = 1'bX;
end 
// expected RTest[ 2 ]
initial
begin
	RTest_expected[2] = 1'bX;
end 
// expected RTest[ 1 ]
initial
begin
	RTest_expected[1] = 1'bX;
end 
// expected RTest[ 0 ]
initial
begin
	RTest_expected[0] = 1'bX;
end 
// expected Stest[ 7 ]
initial
begin
	Stest_expected[7] = 1'bX;
end 
// expected Stest[ 6 ]
initial
begin
	Stest_expected[6] = 1'bX;
end 
// expected Stest[ 5 ]
initial
begin
	Stest_expected[5] = 1'bX;
end 
// expected Stest[ 4 ]
initial
begin
	Stest_expected[4] = 1'bX;
end 
// expected Stest[ 3 ]
initial
begin
	Stest_expected[3] = 1'bX;
end 
// expected Stest[ 2 ]
initial
begin
	Stest_expected[2] = 1'bX;
end 
// expected Stest[ 1 ]
initial
begin
	Stest_expected[1] = 1'bX;
end 
// expected Stest[ 0 ]
initial
begin
	Stest_expected[0] = 1'bX;
end 
// generate trigger
always @(led2_expected or led2 or leds_expected or leds or NEGATORY_expected or NEGATORY or RTest_expected or RTest or Stest_expected or Stest)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led2 = %b | expected leds = %b | expected NEGATORY = %b | expected RTest = %b | expected Stest = %b | ",led2_expected_prev,leds_expected_prev,NEGATORY_expected_prev,RTest_expected_prev,Stest_expected_prev);
	$display("| real led2 = %b | real leds = %b | real NEGATORY = %b | real RTest = %b | real Stest = %b | ",led2_prev,leds_prev,NEGATORY_prev,RTest_prev,Stest_prev);
`endif
	if (
		( led2_expected_prev[0] !== 1'bx ) && ( led2_prev[0] !== led2_expected_prev[0] )
		&& ((led2_expected_prev[0] !== last_led2_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led2_exp[0] = led2_expected_prev[0];
	end
	if (
		( led2_expected_prev[1] !== 1'bx ) && ( led2_prev[1] !== led2_expected_prev[1] )
		&& ((led2_expected_prev[1] !== last_led2_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led2_exp[1] = led2_expected_prev[1];
	end
	if (
		( led2_expected_prev[2] !== 1'bx ) && ( led2_prev[2] !== led2_expected_prev[2] )
		&& ((led2_expected_prev[2] !== last_led2_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led2_exp[2] = led2_expected_prev[2];
	end
	if (
		( led2_expected_prev[3] !== 1'bx ) && ( led2_prev[3] !== led2_expected_prev[3] )
		&& ((led2_expected_prev[3] !== last_led2_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led2_exp[3] = led2_expected_prev[3];
	end
	if (
		( led2_expected_prev[4] !== 1'bx ) && ( led2_prev[4] !== led2_expected_prev[4] )
		&& ((led2_expected_prev[4] !== last_led2_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led2_exp[4] = led2_expected_prev[4];
	end
	if (
		( led2_expected_prev[5] !== 1'bx ) && ( led2_prev[5] !== led2_expected_prev[5] )
		&& ((led2_expected_prev[5] !== last_led2_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led2_exp[5] = led2_expected_prev[5];
	end
	if (
		( led2_expected_prev[6] !== 1'bx ) && ( led2_prev[6] !== led2_expected_prev[6] )
		&& ((led2_expected_prev[6] !== last_led2_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led2_exp[6] = led2_expected_prev[6];
	end
	if (
		( leds_expected_prev[0] !== 1'bx ) && ( leds_prev[0] !== leds_expected_prev[0] )
		&& ((leds_expected_prev[0] !== last_leds_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[0] = leds_expected_prev[0];
	end
	if (
		( leds_expected_prev[1] !== 1'bx ) && ( leds_prev[1] !== leds_expected_prev[1] )
		&& ((leds_expected_prev[1] !== last_leds_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[1] = leds_expected_prev[1];
	end
	if (
		( leds_expected_prev[2] !== 1'bx ) && ( leds_prev[2] !== leds_expected_prev[2] )
		&& ((leds_expected_prev[2] !== last_leds_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[2] = leds_expected_prev[2];
	end
	if (
		( leds_expected_prev[3] !== 1'bx ) && ( leds_prev[3] !== leds_expected_prev[3] )
		&& ((leds_expected_prev[3] !== last_leds_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[3] = leds_expected_prev[3];
	end
	if (
		( leds_expected_prev[4] !== 1'bx ) && ( leds_prev[4] !== leds_expected_prev[4] )
		&& ((leds_expected_prev[4] !== last_leds_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[4] = leds_expected_prev[4];
	end
	if (
		( leds_expected_prev[5] !== 1'bx ) && ( leds_prev[5] !== leds_expected_prev[5] )
		&& ((leds_expected_prev[5] !== last_leds_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[5] = leds_expected_prev[5];
	end
	if (
		( leds_expected_prev[6] !== 1'bx ) && ( leds_prev[6] !== leds_expected_prev[6] )
		&& ((leds_expected_prev[6] !== last_leds_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[6] = leds_expected_prev[6];
	end
	if (
		( NEGATORY_expected_prev[0] !== 1'bx ) && ( NEGATORY_prev[0] !== NEGATORY_expected_prev[0] )
		&& ((NEGATORY_expected_prev[0] !== last_NEGATORY_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEGATORY[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEGATORY_expected_prev);
		$display ("     Real value = %b", NEGATORY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEGATORY_exp[0] = NEGATORY_expected_prev[0];
	end
	if (
		( NEGATORY_expected_prev[1] !== 1'bx ) && ( NEGATORY_prev[1] !== NEGATORY_expected_prev[1] )
		&& ((NEGATORY_expected_prev[1] !== last_NEGATORY_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEGATORY[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEGATORY_expected_prev);
		$display ("     Real value = %b", NEGATORY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEGATORY_exp[1] = NEGATORY_expected_prev[1];
	end
	if (
		( NEGATORY_expected_prev[2] !== 1'bx ) && ( NEGATORY_prev[2] !== NEGATORY_expected_prev[2] )
		&& ((NEGATORY_expected_prev[2] !== last_NEGATORY_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEGATORY[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEGATORY_expected_prev);
		$display ("     Real value = %b", NEGATORY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEGATORY_exp[2] = NEGATORY_expected_prev[2];
	end
	if (
		( NEGATORY_expected_prev[3] !== 1'bx ) && ( NEGATORY_prev[3] !== NEGATORY_expected_prev[3] )
		&& ((NEGATORY_expected_prev[3] !== last_NEGATORY_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEGATORY[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEGATORY_expected_prev);
		$display ("     Real value = %b", NEGATORY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEGATORY_exp[3] = NEGATORY_expected_prev[3];
	end
	if (
		( NEGATORY_expected_prev[4] !== 1'bx ) && ( NEGATORY_prev[4] !== NEGATORY_expected_prev[4] )
		&& ((NEGATORY_expected_prev[4] !== last_NEGATORY_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEGATORY[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEGATORY_expected_prev);
		$display ("     Real value = %b", NEGATORY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEGATORY_exp[4] = NEGATORY_expected_prev[4];
	end
	if (
		( NEGATORY_expected_prev[5] !== 1'bx ) && ( NEGATORY_prev[5] !== NEGATORY_expected_prev[5] )
		&& ((NEGATORY_expected_prev[5] !== last_NEGATORY_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEGATORY[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEGATORY_expected_prev);
		$display ("     Real value = %b", NEGATORY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEGATORY_exp[5] = NEGATORY_expected_prev[5];
	end
	if (
		( NEGATORY_expected_prev[6] !== 1'bx ) && ( NEGATORY_prev[6] !== NEGATORY_expected_prev[6] )
		&& ((NEGATORY_expected_prev[6] !== last_NEGATORY_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NEGATORY[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NEGATORY_expected_prev);
		$display ("     Real value = %b", NEGATORY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NEGATORY_exp[6] = NEGATORY_expected_prev[6];
	end
	if (
		( RTest_expected_prev[0] !== 1'bx ) && ( RTest_prev[0] !== RTest_expected_prev[0] )
		&& ((RTest_expected_prev[0] !== last_RTest_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[0] = RTest_expected_prev[0];
	end
	if (
		( RTest_expected_prev[1] !== 1'bx ) && ( RTest_prev[1] !== RTest_expected_prev[1] )
		&& ((RTest_expected_prev[1] !== last_RTest_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[1] = RTest_expected_prev[1];
	end
	if (
		( RTest_expected_prev[2] !== 1'bx ) && ( RTest_prev[2] !== RTest_expected_prev[2] )
		&& ((RTest_expected_prev[2] !== last_RTest_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[2] = RTest_expected_prev[2];
	end
	if (
		( RTest_expected_prev[3] !== 1'bx ) && ( RTest_prev[3] !== RTest_expected_prev[3] )
		&& ((RTest_expected_prev[3] !== last_RTest_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[3] = RTest_expected_prev[3];
	end
	if (
		( RTest_expected_prev[4] !== 1'bx ) && ( RTest_prev[4] !== RTest_expected_prev[4] )
		&& ((RTest_expected_prev[4] !== last_RTest_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[4] = RTest_expected_prev[4];
	end
	if (
		( RTest_expected_prev[5] !== 1'bx ) && ( RTest_prev[5] !== RTest_expected_prev[5] )
		&& ((RTest_expected_prev[5] !== last_RTest_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[5] = RTest_expected_prev[5];
	end
	if (
		( RTest_expected_prev[6] !== 1'bx ) && ( RTest_prev[6] !== RTest_expected_prev[6] )
		&& ((RTest_expected_prev[6] !== last_RTest_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[6] = RTest_expected_prev[6];
	end
	if (
		( RTest_expected_prev[7] !== 1'bx ) && ( RTest_prev[7] !== RTest_expected_prev[7] )
		&& ((RTest_expected_prev[7] !== last_RTest_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[7] = RTest_expected_prev[7];
	end
	if (
		( RTest_expected_prev[8] !== 1'bx ) && ( RTest_prev[8] !== RTest_expected_prev[8] )
		&& ((RTest_expected_prev[8] !== last_RTest_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RTest[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RTest_expected_prev);
		$display ("     Real value = %b", RTest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RTest_exp[8] = RTest_expected_prev[8];
	end
	if (
		( Stest_expected_prev[0] !== 1'bx ) && ( Stest_prev[0] !== Stest_expected_prev[0] )
		&& ((Stest_expected_prev[0] !== last_Stest_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[0] = Stest_expected_prev[0];
	end
	if (
		( Stest_expected_prev[1] !== 1'bx ) && ( Stest_prev[1] !== Stest_expected_prev[1] )
		&& ((Stest_expected_prev[1] !== last_Stest_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[1] = Stest_expected_prev[1];
	end
	if (
		( Stest_expected_prev[2] !== 1'bx ) && ( Stest_prev[2] !== Stest_expected_prev[2] )
		&& ((Stest_expected_prev[2] !== last_Stest_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[2] = Stest_expected_prev[2];
	end
	if (
		( Stest_expected_prev[3] !== 1'bx ) && ( Stest_prev[3] !== Stest_expected_prev[3] )
		&& ((Stest_expected_prev[3] !== last_Stest_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[3] = Stest_expected_prev[3];
	end
	if (
		( Stest_expected_prev[4] !== 1'bx ) && ( Stest_prev[4] !== Stest_expected_prev[4] )
		&& ((Stest_expected_prev[4] !== last_Stest_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[4] = Stest_expected_prev[4];
	end
	if (
		( Stest_expected_prev[5] !== 1'bx ) && ( Stest_prev[5] !== Stest_expected_prev[5] )
		&& ((Stest_expected_prev[5] !== last_Stest_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[5] = Stest_expected_prev[5];
	end
	if (
		( Stest_expected_prev[6] !== 1'bx ) && ( Stest_prev[6] !== Stest_expected_prev[6] )
		&& ((Stest_expected_prev[6] !== last_Stest_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[6] = Stest_expected_prev[6];
	end
	if (
		( Stest_expected_prev[7] !== 1'bx ) && ( Stest_prev[7] !== Stest_expected_prev[7] )
		&& ((Stest_expected_prev[7] !== last_Stest_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stest_expected_prev);
		$display ("     Real value = %b", Stest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Stest_exp[7] = Stest_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#320000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module intelcoreiBOSS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg clock;
reg reset;
// wires                                               
wire [6:0] led2;
wire [6:0] leds;
wire [6:0] NEGATORY;
wire [8:0] RTest;
wire [0:7] Stest;

wire sampler;                             

// assign statements (if any)                          
intelcoreiBOSS i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clock(clock),
	.led2(led2),
	.leds(leds),
	.NEGATORY(NEGATORY),
	.reset(reset),
	.RTest(RTest),
	.Stest(Stest)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

intelcoreiBOSS_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clock(clock),
	.reset(reset),
	.sampler_tx(sampler)
);

intelcoreiBOSS_vlg_check_tst tb_out(
	.led2(led2),
	.leds(leds),
	.NEGATORY(NEGATORY),
	.RTest(RTest),
	.Stest(Stest),
	.sampler_rx(sampler)
);
endmodule

